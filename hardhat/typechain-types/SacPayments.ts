/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace SacPayments {
  export type TipInfoStruct = {
    from: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type TipInfoStructOutput = [string, BigNumber, string, BigNumber] & {
    from: string;
    amount: BigNumber;
    message: string;
    timestamp: BigNumber;
  };
}

export interface SacPaymentsInterface extends utils.Interface {
  functions: {
    "getTipsHistory(address)": FunctionFragment;
    "profiles(address,uint256)": FunctionFragment;
    "tip(address,string)": FunctionFragment;
    "totalDonated(address)": FunctionFragment;
    "totalReceived(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTipsHistory"
      | "profiles"
      | "tip"
      | "totalDonated"
      | "totalReceived"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTipsHistory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "profiles",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tip",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReceived",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTipsHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDonated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReceived",
    data: BytesLike
  ): Result;

  events: {
    "NewTips(address,address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewTips"): EventFragment;
}

export interface NewTipsEventObject {
  from: string;
  to: string;
  timestamp: BigNumber;
  message: string;
}
export type NewTipsEvent = TypedEvent<
  [string, string, BigNumber, string],
  NewTipsEventObject
>;

export type NewTipsEventFilter = TypedEventFilter<NewTipsEvent>;

export interface SacPayments extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SacPaymentsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTipsHistory(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SacPayments.TipInfoStructOutput[]]>;

    profiles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        from: string;
        amount: BigNumber;
        message: string;
        timestamp: BigNumber;
      }
    >;

    tip(
      tipAddress: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalDonated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalReceived(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getTipsHistory(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SacPayments.TipInfoStructOutput[]>;

  profiles(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber] & {
      from: string;
      amount: BigNumber;
      message: string;
      timestamp: BigNumber;
    }
  >;

  tip(
    tipAddress: PromiseOrValue<string>,
    message: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalDonated(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalReceived(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getTipsHistory(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SacPayments.TipInfoStructOutput[]>;

    profiles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        from: string;
        amount: BigNumber;
        message: string;
        timestamp: BigNumber;
      }
    >;

    tip(
      tipAddress: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDonated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReceived(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "NewTips(address,address,uint256,string)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      timestamp?: null,
      message?: null
    ): NewTipsEventFilter;
    NewTips(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      timestamp?: null,
      message?: null
    ): NewTipsEventFilter;
  };

  estimateGas: {
    getTipsHistory(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    profiles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tip(
      tipAddress: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalDonated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReceived(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTipsHistory(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profiles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tip(
      tipAddress: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalDonated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReceived(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
